# yaml-language-server: https://json.schemastore.org/github-workflow.json

# Continuous Delivery Example (requires manual intervention to deploy to each environment)
# Use environments to require manual approvals between jobs
# Environments require public repositories or private repositories on GitHub with Enterprise plans

name: Continuous Delivery

on: 
  push:
    branches: [main]
  
  pull_request:
    branches: [main]
    
  workflow_dispatch:
  
permissions:
  id-token: write
  
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
env:
  deploymentSlotName: stage
  location: eastus
  prodResourceGroup: rg-prod

jobs:
  
  # Build Application
  Build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v3

      - name: Build Steps Here
        run: echo "Running build steps..."

      # Publish the artificats so they are available by subsequent jobs
      # Uploading application to build artifact
      - name: Upload ARM Templates as Artifact
        continue-on-error: false
        uses: actions/upload-artifact@v3
        with:
          name: infra
          path: infra

      # Publish the artificats so they are available by subsequent jobs
      # Uploading application to build artifact
      - name: Upload Application Build as Artifact
        continue-on-error: false
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: src


  # Deploy to the Development servers
  DeployDev:
    name: Development
    if: github.event_name == 'pull_request'
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: Development
    
    steps:
      # Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        continue-on-error: false
          
      # Log in to Azure
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy resources to Azure
      - uses: azure/arm-deploy@v1
        id: deployStep
        with:
          scope: subscription
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          region: ${{ env.location }}
          template: ./infra/main.bicep
          parameters: ./infra/main.dev.parameters.json

      # Deploy code to web app
      - name: Deploy code to the WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.deployStep.outputs.webAppName }}
          package: ./build

      - name: Deployment Message
        run: echo "Deployed Application to ${{ steps.deployStep.outputs.output1 }}"


  # Deploy to the QA servers
  DeployQA:
    name: QA
    if: github.event.ref == 'refs/heads/main'
    needs: Build
    runs-on: ubuntu-latest
    environment: 
      name: QA
    
    steps:
      # Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        continue-on-error: false
          
      # Log in to Azure
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy resources to Azure
      - uses: azure/arm-deploy@v1
        id: deployStep
        with:
          scope: subscription
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          region: ${{ env.location }}
          template: ./infra/main.bicep
          parameters: ./infra/main.qa.parameters.json

      # Deploy code to web app
      - name: Deploy code to the WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.deployStep.outputs.webAppName }}
          package: ./build

      - name: Deployment Message
        run: echo "Deployed Application to ${{ steps.deployStep.outputs.output1 }}"


  # Deploy to the Staging servers
  DeployStage:
    name: Stage
    needs: DeployQA
    runs-on: ubuntu-latest
    environment: 
      name: Stage

    outputs:
      webAppName: ${{ steps.deployStep.outputs.webAppName }}
    
    steps:
      # Download Artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        continue-on-error: false
          
      # Log in to Azure
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy resources to Azure
      - uses: azure/arm-deploy@v1
        id: deployStep
        with:
          scope: subscription
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          region: ${{ env.location }}
          template: ./infra/main.bicep
          parameters: ./infra/main.prod.parameters.json

      # Deploy code to web app
      - name: Deploy code to the WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ steps.deployStep.outputs.webAppName }}
          slot-name: ${{ env.deploymentSlotName }}
          package: ./build

      - name: Deployment Message
        run: echo "Deployed Application to ${{ steps.deployStep.outputs.output1 }}"


  # Deploy to the Production servers
  DeployProduction:
    name: Production
    needs: DeployStage
    runs-on: ubuntu-latest
    environment: 
      name: Production

    steps:
      - name: Deploy to Production
        run: echo "Deploy Application to Production"
          
      # Log in to Azure
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Azure CLI command for WebApp Deployment Slot swapping
      # https://docs.microsoft.com/en-us/cli/azure/webapp/deployment/slot?view=azure-cli-latest
      - uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.prodResourceGroup }} -n ${{ needs.DeployStage.outputs.webAppName }} -s ${{ env.deploymentSlotName }}
